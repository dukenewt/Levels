// Mocks generated by Mockito 5.4.6 from annotations
// in dailyxp/test/widgets/task_tile_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:ui' as _i7;

import 'package:dailyxp/models/task.dart' as _i4;
import 'package:dailyxp/models/task_results.dart' as _i2;
import 'package:dailyxp/providers/task_provider.dart' as _i3;
import 'package:flutter/material.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskCompletionResult_0 extends _i1.SmartFake
    implements _i2.TaskCompletionResult {
  _FakeTaskCompletionResult_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskProvider extends _i1.Mock implements _i3.TaskProvider {
  MockTaskProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.Task> get tasks => (super.noSuchMethod(
        Invocation.getter(#tasks),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  Map<String, List<_i4.Task>> get tasksByCategory => (super.noSuchMethod(
        Invocation.getter(#tasksByCategory),
        returnValue: <String, List<_i4.Task>>{},
      ) as Map<String, List<_i4.Task>>);

  @override
  List<_i4.Task> get activeTasks => (super.noSuchMethod(
        Invocation.getter(#activeTasks),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  List<_i4.Task> get completedTasksToday => (super.noSuchMethod(
        Invocation.getter(#completedTasksToday),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  List<_i4.Task> get futureTasks => (super.noSuchMethod(
        Invocation.getter(#futureTasks),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  List<_i4.Task> get tasksForUpcomingWeek => (super.noSuchMethod(
        Invocation.getter(#tasksForUpcomingWeek),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<_i4.Task> getFilteredActiveTasks(_i5.BuildContext? context) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilteredActiveTasks,
          [context],
        ),
        returnValue: <_i4.Task>[],
      ) as List<_i4.Task>);

  @override
  _i6.Future<List<_i4.Task>> getTasksForDate(DateTime? date) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTasksForDate,
          [date],
        ),
        returnValue: _i6.Future<List<_i4.Task>>.value(<_i4.Task>[]),
      ) as _i6.Future<List<_i4.Task>>);

  @override
  void addTask(_i4.Task? task) => super.noSuchMethod(
        Invocation.method(
          #addTask,
          [task],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i6.Future<void> updateTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #updateTask,
          [task],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<_i2.TaskCompletionResult> completeTask(String? taskId) =>
      (super.noSuchMethod(
        Invocation.method(
          #completeTask,
          [taskId],
        ),
        returnValue: _i6.Future<_i2.TaskCompletionResult>.value(
            _FakeTaskCompletionResult_0(
          this,
          Invocation.method(
            #completeTask,
            [taskId],
          ),
        )),
      ) as _i6.Future<_i2.TaskCompletionResult>);

  @override
  _i6.Future<void> createTask(_i4.Task? task) => (super.noSuchMethod(
        Invocation.method(
          #createTask,
          [task],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> deleteTask(String? taskId) => (super.noSuchMethod(
        Invocation.method(
          #deleteTask,
          [taskId],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> fetchTasks() => (super.noSuchMethod(
        Invocation.method(
          #fetchTasks,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> updateTasksList(List<_i4.Task>? newTasks) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTasksList,
          [newTasks],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  _i6.Future<void> maintainRecurringTaskWindow() => (super.noSuchMethod(
        Invocation.method(
          #maintainRecurringTaskWindow,
          [],
        ),
        returnValue: _i6.Future<void>.value(),
        returnValueForMissingStub: _i6.Future<void>.value(),
      ) as _i6.Future<void>);

  @override
  void addListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i7.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
